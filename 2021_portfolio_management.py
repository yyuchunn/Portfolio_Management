# -*- coding: utf-8 -*-
"""2021_Portfolio_Management.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Npyl_fZnw2r5hW7wZh_x-McK3WtPSJi8

## 匯入函式庫
"""

import numpy as np

"""## 設定變數"""

data_path = '/content/2021.txt'

training_range = [20150427, 20180426]
validation_range = [20180426, 20210426]

init_fund = 10e6

"""## 函式

### 新增元素(字典)
"""

def push_dict_mapping(k: str, v: str or list, dict_: dict, mode: str = 'a'):
    if mode == 'a':
        if k not in dict_:
            dict_[k] = [v]
        else:
            dict_[k].append(v)
    else:
        if k not in dict_:
            dict_[k] = v

    return dict_

"""### 移動平均"""

def moving_average(x, w):
    return np.convolve(x, np.ones(w), 'valid') / w

"""### 取得某範圍的資料"""

def get_target_data(list_: list, range_: list, col: int = 3, prefix: int = 19):
    index_list = [0, 0]
    for item_index, item in enumerate(list_):
        if item[0] == range_[0]:
            index_list[0] = item_index - prefix
            continue
        elif item[0] == range_[1]:
            index_list[1] = item_index
            break

    return [item[col] for item in list_[index_list[0]:index_list[1] + 1]]

"""### 執行策略"""

def strategy_operation(data: list, buy_point: list, sell_point: list):
    buy_index = 0
    sell_index = 0

    fund = init_fund
    unit = 0

    status = 0
    if buy_point[buy_index] < sell_point[sell_index]:
        unit = fund / data[buy_point[buy_index]]
        fund = 0
        buy_index += 1
    else:
        fund += unit * data[sell_point[sell_index]]
        unit = fund / data[sell_point[sell_index]]
        sell_index += 1

        status = 1

    while True:
        if sell_index >= len(sell_point):
            if buy_index < len(buy_point):
                fund += unit * data[buy_point[buy_index]]
                unit = fund / data[buy_point[buy_index]]
                fund = 0

                status = 0
            buy_index += 1
            break
        elif buy_index >= len(buy_point):
            if sell_index < len(sell_point):
                fund += unit * data[sell_point[sell_index]]
                unit = fund / data[sell_point[sell_index]]

                status = 1
            sell_index += 1
            break
        elif buy_point[buy_index] < sell_point[sell_index]:
            if status == 1:
                fund += unit * data[buy_point[buy_index]]
                unit = fund / data[buy_point[buy_index]]
                fund = 0

                status = 0
            buy_index += 1
        elif buy_point[buy_index] > sell_point[sell_index]:
            if status == 0:
                fund += unit * data[sell_point[sell_index]]
                unit = fund / data[sell_point[sell_index]]

                status = 1
            sell_index += 1

    if unit > 0:
        fund += unit * data[-1]
    return fund

"""## 讀檔並載入資料"""

with open(data_path, mode='r', encoding='cp950') as f:
    title = f.readline().split('\t')

    print(title)

    stock_dict = {}
    data_dict = {}
    for row in f.readlines():
        # print(row, end='')

        row = [item.strip() for item in row.split('\t')]

        stock_dict = push_dict_mapping(row[0], row[1], stock_dict, mode='')
        temp = [float(item) for item in row[2:-3]]
        temp.append(float(row[-2]))
        data_dict = push_dict_mapping(row[0], temp, data_dict)

"""## 顯示資料"""

print(stock_dict)

print(data_dict)

print(data_dict['2303'])

for key, value in stock_dict.items():
    print(key, value, sep=':\t')

for item in data_dict['2303']:
    print(item)

for key in data_dict.keys():
    print(key, stock_dict[key] ,len(data_dict[key]), sep=':\t')

"""## 計算六年資料量"""

count = 0
for item in data_dict['2303']:
    if item[0] >= training_range[0] and item[1] <= validation_range[1]:
        count += 1
print(count)

count += 19
print(count)

"""## 訓練期

### 設定變數
"""

company = '2303'

Ht = get_target_data(data_dict[company], training_range, col=1)
Lt = get_target_data(data_dict[company], training_range, col=2)
Ct = get_target_data(data_dict[company], training_range)
turnover_rate_t = get_target_data(data_dict[company], training_range, col=4)
Ot = get_target_data(data_dict[company], training_range, col=5)

H20 = moving_average(np.asarray(Ht[:-1], dtype=np.float), 20)
L20 = moving_average(np.asarray(Lt[:-1], dtype=np.float), 20)

"""### 找贏家點與輸家點"""

winner_index = []
loser_index = []
for index in range(len(Ct[:-1])):
    if Ct[index] >= Ht[index]:
        winner_index.append(index)
    elif Ct[index] <= Lt[index]:
        loser_index.append(index)

print(len(winner_index))
print(len(loser_index))

print(winner_index)

"""### 計算處分效果"""

avg_winner_turnover_rate = np.mean(np.asarray(turnover_rate_t, dtype=np.float)[winner_index])
avg_loser_turnover_rate = np.mean(np.asarray(turnover_rate_t, dtype=np.float)[loser_index])

print(avg_winner_turnover_rate)
print(avg_loser_turnover_rate)

disposition_effect = avg_winner_turnover_rate / avg_loser_turnover_rate
print(disposition_effect)

"""### 找出買賣點"""

buy_point1 = []
buy_point2 = []

sell_point1 = []
sell_point2 = []

for index in winner_index:
    if turnover_rate_t[index] < avg_winner_turnover_rate:
        buy_point1.append(index)
    elif turnover_rate_t[index] > avg_loser_turnover_rate:
        buy_point2.append(index)
for index in loser_index:
    if turnover_rate_t[index] > avg_winner_turnover_rate:
        sell_point1.append(index)
    elif turnover_rate_t[index] < avg_loser_turnover_rate:
        sell_point2.append(index)

print(len(buy_point1))
print(len(buy_point2))
print(len(sell_point1))
print(len(sell_point2))

"""### 執行四個策略，並找出最佳"""

fund1 = strategy_operation(Ot[1:], buy_point1, sell_point1)
fund2 = strategy_operation(Ot[1:], buy_point2, sell_point1)
fund3 = strategy_operation(Ot[1:], buy_point1, sell_point2)
fund4 = strategy_operation(Ot[1:], buy_point2, sell_point2)
print(fund1, fund2, fund3, fund4, sep='\t')

funds = np.asarray([fund1, fund2, fund3, fund4], dtype=np.float)
good_index = np.argmax(funds)
print(good_index)

"""## 檢驗期

### 設定變數
"""

Ht = get_target_data(data_dict[company], validation_range, col=1)
Lt = get_target_data(data_dict[company], validation_range, col=2)
Ct = get_target_data(data_dict[company], validation_range)
turnover_rate_t = get_target_data(data_dict[company], validation_range, col=4)
Ot = get_target_data(data_dict[company], validation_range, col=5)

H20 = moving_average(np.asarray(Ht[:-1], dtype=np.float), 20)
L20 = moving_average(np.asarray(Lt[:-1], dtype=np.float), 20)

"""### 找贏家點與輸家點"""

winner_index = []
loser_index = []
for index in range(len(Ct[:-1])):
    if Ct[index] >= Ht[index]:
        winner_index.append(index)
    elif Ct[index] <= Lt[index]:
        loser_index.append(index)

print(len(winner_index))
print(len(loser_index))

"""### 找出買賣點"""

buy_point1 = []
buy_point2 = []

sell_point1 = []
sell_point2 = []

for index in winner_index:
    if turnover_rate_t[index] < avg_winner_turnover_rate:
        buy_point1.append(index)
    elif turnover_rate_t[index] > avg_loser_turnover_rate:
        buy_point2.append(index)
for index in loser_index:
    if turnover_rate_t[index] > avg_winner_turnover_rate:
        sell_point1.append(index)
    elif turnover_rate_t[index] < avg_loser_turnover_rate:
        sell_point2.append(index)

print(len(buy_point1))
print(len(buy_point2))
print(len(sell_point1))
print(len(sell_point2))

"""### 執行四個策略，並找出最佳"""

fund1 = strategy_operation(Ot[1:], buy_point1, sell_point1)
fund2 = strategy_operation(Ot[1:], buy_point2, sell_point1)
fund3 = strategy_operation(Ot[1:], buy_point1, sell_point2)
fund4 = strategy_operation(Ot[1:], buy_point2, sell_point2)
print(fund1, fund2, fund3, fund4, sep='\t')

funds = np.asarray([fund1, fund2, fund3, fund4], dtype=np.float)
good_index = np.argmax(funds)
print(good_index)

"""## 進階"""

for company in data_dict.keys():
    if len(data_dict[company]) < 1539:
        print(company, stock_dict[company], 'can\'t be executed.', end='\n\n')
        continue
    
    print(company, stock_dict[company])
    # 訓練期
    Ht = get_target_data(data_dict[company], training_range, col=1)
    Lt = get_target_data(data_dict[company], training_range, col=2)
    Ct = get_target_data(data_dict[company], training_range)
    turnover_rate_t = get_target_data(data_dict[company], training_range, col=4)
    Ot = get_target_data(data_dict[company], training_range, col=5)

    H20 = moving_average(np.asarray(Ht[:-1], dtype=np.float), 20)
    L20 = moving_average(np.asarray(Lt[:-1], dtype=np.float), 20)

    winner_index = []
    loser_index = []
    for index in range(len(Ct[:-1])):
        if Ct[index] >= Ht[index]:
            winner_index.append(index)
        elif Ct[index] <= Lt[index]:
            loser_index.append(index)

    # print(len(winner_index))
    # print(len(loser_index))

    avg_winner_turnover_rate = np.mean(np.asarray(turnover_rate_t, dtype=np.float)[winner_index])
    avg_loser_turnover_rate = np.mean(np.asarray(turnover_rate_t, dtype=np.float)[loser_index])

    print('\tavg_winner_turnover_rate:', avg_winner_turnover_rate)
    print('\tavg_loser_turnover_rate:', avg_loser_turnover_rate)

    disposition_effect = avg_winner_turnover_rate / avg_loser_turnover_rate
    print('\tdisposition_effect', disposition_effect)

    buy_point1 = []
    buy_point2 = []

    sell_point1 = []
    sell_point2 = []

    for index in winner_index:
        if turnover_rate_t[index] < avg_winner_turnover_rate:
            buy_point1.append(index)
        elif turnover_rate_t[index] > avg_loser_turnover_rate:
            buy_point2.append(index)
    for index in loser_index:
        if turnover_rate_t[index] > avg_winner_turnover_rate:
            sell_point1.append(index)
        elif turnover_rate_t[index] < avg_loser_turnover_rate:
            sell_point2.append(index)

    # print('\t', len(buy_point1))
    # print('\t', len(buy_point2))
    # print('\t', len(sell_point1))
    # print('\t', len(sell_point2))

    stop_flag = False
    points = [len(buy_point1), len(buy_point2), len(sell_point1), len(sell_point2)]
    for point in points:
        if point == 0:
            stop_flag = True
            break

    print('\t----------------訓練期----------------')
    if stop_flag:
        print('\tXXX', points)
    else:
        fund1 = strategy_operation(Ot[1:], buy_point1, sell_point1)
        fund2 = strategy_operation(Ot[1:], buy_point2, sell_point1)
        fund3 = strategy_operation(Ot[1:], buy_point1, sell_point2)
        fund4 = strategy_operation(Ot[1:], buy_point2, sell_point2)
        print('\t', fund1, fund2, fund3, fund4)

        funds = np.asarray([fund1, fund2, fund3, fund4], dtype=np.float)
        good_index = np.argmax(funds)
        print('\t', good_index)

    # 檢驗期
    Ht = get_target_data(data_dict[company], validation_range, col=1)
    Lt = get_target_data(data_dict[company], validation_range, col=2)
    Ct = get_target_data(data_dict[company], validation_range)
    turnover_rate_t = get_target_data(data_dict[company], validation_range, col=4)
    Ot = get_target_data(data_dict[company], validation_range, col=5)

    H20 = moving_average(np.asarray(Ht[:-1], dtype=np.float), 20)
    L20 = moving_average(np.asarray(Lt[:-1], dtype=np.float), 20)

    winner_index = []
    loser_index = []
    for index in range(len(Ct[:-1])):
        if Ct[index] >= Ht[index]:
            winner_index.append(index)
        elif Ct[index] <= Lt[index]:
            loser_index.append(index)

    # print('\t', len(winner_index))
    # print('\t', len(loser_index))

    buy_point1 = []
    buy_point2 = []

    sell_point1 = []
    sell_point2 = []

    for index in winner_index:
        if turnover_rate_t[index] < avg_winner_turnover_rate:
            buy_point1.append(index)
        elif turnover_rate_t[index] > avg_loser_turnover_rate:
            buy_point2.append(index)
    for index in loser_index:
        if turnover_rate_t[index] > avg_winner_turnover_rate:
            sell_point1.append(index)
        elif turnover_rate_t[index] < avg_loser_turnover_rate:
            sell_point2.append(index)

    # print('\t', len(buy_point1))
    # print('\t', len(buy_point2))
    # print('\t', len(sell_point1))
    # print('\t', len(sell_point2))

    stop_flag = False
    points = [len(buy_point1), len(buy_point2), len(sell_point1), len(sell_point2)]
    for point in points:
        if point == 0:
            stop_flag = True
            break
    
    print('\t----------------檢驗期----------------')
    if stop_flag:
        print('\tXXX', points)
        continue

    fund1 = strategy_operation(Ot[1:], buy_point1, sell_point1)
    fund2 = strategy_operation(Ot[1:], buy_point2, sell_point1)
    fund3 = strategy_operation(Ot[1:], buy_point1, sell_point2)
    fund4 = strategy_operation(Ot[1:], buy_point2, sell_point2)
    print('\t', fund1, fund2, fund3, fund4)

    funds = np.asarray([fund1, fund2, fund3, fund4], dtype=np.float)
    good_index = np.argmax(funds)
    print('\t', good_index)
    
    print()